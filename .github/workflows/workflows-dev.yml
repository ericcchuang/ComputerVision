name: Combined CI/CD Develop

on:
  push:
    paths:
      - "api/**"
      - ".github/workflows/workflows-dev.yml"
      - "ui/**"

permissions:
  contents: write
  pages: write
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  DEV_API_SERVICE_NAME: dev-fastapi-service
  DEV_GH_PAGES_SERVICE_NAME: dev-computervision
  REGION: us-east4
  IMAGE_NAME: my-fastapi-app

jobs:
  api:
    if:
      false
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            api/

      - name: Authenticate to Google Cloud
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.DEV_API_SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move updated cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to Cloud Run
        id: deploy_cloud_run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.DEV_API_SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.DEV_API_SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: "--allow-unauthenticated --memory=2Gi --cpu=4 --concurrency=4 --timeout=10m5s"

      - name: Show deployed service URL
        run: |
          echo "Cloud Run service URL: ${{ steps.deploy_cloud_run.outputs.url }}"

  android:
    if:
      false
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            ui/
            app/
            android/
            assets/
            node_modules/
            dist/
            package.json
            package-lock.json
            app.json
            app.config.js
            Dockerfile
            eas.json
            eslint.config.js

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm ci

      - name: npx expo prebuild
        run: npx expo prebuild --platform android
        env:
          CI: 1

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Set Gradlew Permissions
        run: chmod +x android/gradlew

      - name: Extract app version from app.json
        id: extract_version
        run: |
          echo "APP_VERSION=$(jq -r .expo.version app.json)" >> $GITHUB_ENV

      - name: Build application
        run: |
          cd android
          ./gradlew assembleRelease
        #  ./gradlew bundleRelease
        # ./gradlew clean

      - name: Debug APK build output
        run: ls -lh android/app/build/outputs/apk/release

      - name: Echo APK filename before renaming (debug)
        run: echo $(ls android/app/build/outputs/apk/release/*.apk)

      - name: Rename APK
        run: |
          mv android/app/build/outputs/apk/release/*.apk android/app/build/outputs/apk/release/android-computervision-${{env.APP_VERSION}}.apk

      - name: Echo APK filename after renaming (debug)
        run: echo $(ls android/app/build/outputs/apk/release/*.apk)

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: android-computervision-${{env.APP_VERSION}}
          path: ui/android/app/build/outputs/apk/release/*.apk
          retention-days: 3

    #  - name: Upload application bundle
    #    uses: actions/upload-artifact@v4
    #    with:
    #      name: computervision-aab
    #      path: ui/android/app/build/outputs/bundle/release/app-release.aab
    #      retention-days: 3

  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      - name: Install dependencies
        run: npm ci

      - name: Set PUBLIC_URL for GitHub Pages
        run: echo "PUBLIC_URL=/ComputerVision" >> $GITHUB_ENV

      - name: Build Expo Web
        run: |
            export PUBLIC_URL=/ComputerVision
            npx expo export --platform web --output-dir dist
            echo "" > dist/.nojekyll
        env:
          PUBLIC_URL: /ComputerVision
      
      - name: Fix asset paths for GitHub Pages
        run: |
          find dist -type f \( -name "*.html" -o -name "*.js" -o -name "*.css" \) -exec \
          sed -i 's|/_expo/|./_expo/|g; s|/assets/|./assets/|g' {} +

      - name: Log built JS files (debug)
        run: |
          echo "Listing JS files in dist:"
          find dist -type f -name "*.js" | sort
          
      - name: Add 404.html for SPA routing
        run: |
          echo '<!DOCTYPE html><html><head><meta charset="UTF-8" /><title>Redirecting</title><script>window.location.replace("/ComputerVision/#/");</script></head><body><p>Redirecting to homepage...</p></body></html>' > dist/404.html
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ui/dist
      - name: Deploy to gh-pages branch
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ui/dist
          publish_branch: gh-pages