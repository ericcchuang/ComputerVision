name: Combined CI/CD Main Branch

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  API_SERVICE_NAME: fastapi-service
  GH_PAGES_SERVICE_NAME: computervision
  REGION: us-east4
  IMAGE_NAME: my-fastapi-app

jobs:
  api:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            api/

      - name: Authenticate to Google Cloud
        id: "auth"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${REGION}-docker.pkg.dev

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image with cache
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.API_SERVICE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move updated cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy to Cloud Run
        id: deploy_cloud_run
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.API_SERVICE_NAME }}
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}/${{ env.API_SERVICE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          flags: "--allow-unauthenticated --memory=2Gi --cpu=4 --concurrency=4 --timeout=10m5s"

      - name: Show deployed service URL
        run: |
          echo "Cloud Run service URL: ${{ steps.deploy_cloud_run.outputs.url }}"

  android:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ui
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            ui/
            app/
            android/
            assets/
            node_modules/
            dist/
            package.json
            package-lock.json
            app.json
            app.config.js
            Dockerfile
            eas.json
            eslint.config.js

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm ci

      - name: npx expo prebuild
        run: npx expo prebuild --platform android
        env:
          CI: 1

      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Set Gradlew Permissions
        run: chmod +x android/gradlew

      - name: Extract app version from app.json
        id: extract_version
        run: |
          echo "APP_VERSION=$(jq -r .expo.version app.json)" >> $GITHUB_ENV

      - name: Build application
        run: |
          cd android
          ./gradlew assembleRelease
        #  ./gradlew bundleRelease
        # ./gradlew clean

      - name: Debug APK build output
        run: ls -lh android/app/build/outputs/apk/release

      - name: Echo APK filename before renaming (debug)
        run: echo $(ls android/app/build/outputs/apk/release/*.apk)

      - name: Rename APK
        run: |
          mv android/app/build/outputs/apk/release/*.apk android/app/build/outputs/apk/release/android-computervision-${{env.APP_VERSION}}.apk

      - name: Echo APK filename after renaming (debug)
        run: echo $(ls android/app/build/outputs/apk/release/*.apk)

      - name: Upload application
        uses: actions/upload-artifact@v4
        with:
          name: android-computervision-${{env.APP_VERSION}}
          path: ui/android/app/build/outputs/apk/release/*.apk
          retention-days: 3

    #  - name: Upload application bundle
    #    uses: actions/upload-artifact@v4
    #    with:
    #      name: computervision-aab
    #      path: ui/android/app/build/outputs/bundle/release/app-release.aab
    #      retention-days: 3

  ios:
    runs-on: macos-latest
    defaults:
      run:
        working-directory: ui

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Cache npm dependencies
        uses: actions/cache@v4
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('ui/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v7
        with:
          token: ${{ secrets.EXPO_TOKEN }}
          expo-version: latest
          eas-version: latest

      - name: Install dependencies
        run: npm ci

      #MUST use xCode 16 or build will fail after ~15 mins
      - name: Use xCode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16"

      - name: Extract app version from app.json
        id: extract_version
        run: |
          echo "APP_VERSION=$(jq -r .expo.version app.json)" >> $GITHUB_ENV

      - name: Build app
        env:
          APP_VERSION: ${{env.APP_VERSION}}
        run: |
          eas build --local \
            --non-interactive \
            --output=./ios-computervision-${APP_VERSION}.ipa \
            --platform=ios \
            --profile=production

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-computervision-${{env.APP_VERSION}}
          path: |
            ui/ios-computervision-${{env.APP_VERSION}}.ipa

  spa:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            ui/

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GH_SA_KEY }}
          project_id: ${{ secrets.GH_PAGES_GCP_PROJECT_ID }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker

      - name: Build and Push Docker Image
        run: |
          docker build -t gcr.io/${{ secrets.GH_PAGES_GCP_PROJECT_ID }}/${{ secrets.GH_DOCKER_IMAGE_NAME }}:latest .
          docker push gcr.io/${{ secrets.GH_PAGES_GCP_PROJECT_ID }}/${{ secrets.GH_DOCKER_IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $GH_PAGES_SERVICE_NAME \
            --image gcr.io/${{ secrets.GH_PAGES_GCP_PROJECT_ID }}/${{ secrets.GH_DOCKER_IMAGE_NAME }}:latest \
            --platform managed \
            --region us-east4 \
            --allow-unauthenticated

  artifact-download-page:
    needs: [android, ios]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current Branch
        uses: actions/checkout@v3

      - name: Fetch Artifacts JSON
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
            > docs/artifacts.json

      - name: Filter by Commit SHA and Generate HTML
        run: |
          COMMIT_SHA="${{ github.sha }}"

          echo '<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Computer Vision Downloads</title></head><body><h1>Computer Vision Downloads</h1><ul>' > docs/index.html

          jq -r --arg sha "$COMMIT_SHA" '
            .artifacts[]
            | select(.workflow_run.head_sha == $sha)
            | "<li><a href=\"https://github.com/${{ github.repository }}/actions/runs/" + 
              (.workflow_run.id | tostring) + 
              "/artifacts/" + 
              (.id | tostring) + "\">" + 
              .name + "</a></li>"
          ' docs/artifacts.json >> docs/index.html

          echo '</ul></body></html>' >> docs/index.html

      - name: Commit and Push
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git stash
          git pull origin "${{ github.ref_name }}" --rebase
          git stash pop
          git add docs/artifacts.json docs/index.html
          git commit -m "Add artifact index for commit $COMMIT_SHA"
          git push

  ci:
    runs-on: ubuntu-latest
    steps:
      - run: echo "Passing required ci check"